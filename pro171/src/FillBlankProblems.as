package  
{
/**
 * ...
 * @author Sameer Sonawane
 */

public class FillBlankProblems 
{
/* TestProject Framework Handle */
private var experimentName:String;                /* Title which appears on top border */
private var developerName:String;                 /* Developer name which appears on top border */

/* Experiment Question Bank and Choice */
private var questionBankSize:uint;                /* Number of sentences in problem space (question bank) */
private var questionBank:Vector.<String>;         /* Question Bank */

public function FillBlankProblems() 
{
    /* Initialise Question Bank */
    this.initialiseQuestionBank();
}

/**
 *
 * This function fills the array of fill in the blank problem statements
 * This function also creates all the required vectors
 * Each problem statment is delimited by $$$ substring
 * Each problem statment has upto six blank areas specified by a series of three or more underscores preferably separated by blank
 * Each underscore substring gets a solution index beginning with 0 and increasing upto 5
 * The length of the uderscore string should preferably be sufficient to hold the longest option.
 * The fill in the blank options follow the end $$$ delimiter
 * Each option is separated by a two ## substring
 * The beginning ## substring is followed by solution index to which this option belongs
 * The correct option has the letter C preceding the solution index
 * There can be only one correct option for each fill in the blank area
 * Each problem statement is picked up and divided into blanks and options and presented for drag and drop
 * Example problem statement : "$$$I ____ eating ________.$$$##C0am##0is##0are##C1fruit##1water##1wood##1shirt##"
 * Fill in the blank string "I ____ eating ________."
 * Option for solution index 0 "am" is correct
 * Option for solution index 0 "is" is incorrect
 * Option for solution index 0 "are" is incorrect
 * Option for solution index 1 "fruit" is correct
 * Option for solution index 1 "water" is incorrect
 * Option for solution index 1 "wood" is incorrect
 * Option for solution index 1 "shirt" is incorrect
 * 
 * Important : The problem statements are picked up at random. Therefore statements can be repeated to ensure greater frequency.
 *
 */
public function initialiseQuestionBank():void
{
    /* Set Title and Developer */
    experimentName = new String("Some Natural Phenomenon");
    developerName  = new String("Sameer Sonawane");

    /* Now create the problem sentence array */
    questionBankSize = 25;
    questionBank = new Vector.<String>(questionBankSize);

    /* The problem statements are hardcoded here */
    /* In this special case, they could have been generated through a loop */
    questionBank[0] = "$$$_______ charge is aquired by a glass rod when rubbed with silk.$$$##C0positive##0negative##0no##";
    questionBank[1] = "$$$Glass rod charged by silk _________ plastic straw rubbed with polythene.$$$##0repels##C0attracts##";
    questionBank[2] = "$$$The electric charges generated by rubbing are _____.$$$##0in motion##C0static##0dynamic##";
    questionBank[3] = "$$$When a charged object is touched to a electroscope,the leaves get _______  charge.$$$##0opposite##C0same##0no##";
    questionBank[4] = "$$$Transfering of charge from a charged object to the earth is called __________ .$$$##0conduction##C0earthing##0electric discharge##";
    questionBank[5] = "$$$In thunderstorm, the air currents move __________ .$$$##0downward##0horizontally##C0upward##";
    questionBank[6] = "$$$In thunderstorm, the water droplets move ___________ .$$$##0upward##0horizontally##C0downward##";
    questionBank[7] = "$$$In thunderstorm, the positive charges accumulate at _______ edges of clouds.$$$##0lower##0middle##C0upper##";
    questionBank[8] = "$$$In thunderstorm, the negative charges accumulate at _______ edges of clouds .$$$##C0lower##0middle##0upper##";
    questionBank[9] = "$$$During lightening, one should take shelter under _______ trees.$$$##0large##0long##C0short##";
    questionBank[10] = "$$$During thunderstorm, one should not use _________ .$$$##0mobiles##C0umbrella##0cordless phone##";
    questionBank[11] = "$$$Each fragment of the earth's outermostlayer is called _______ .$$$##0crust##C0plate##0mantle##";
    questionBank[12] = "$$$Earthquakes are mostly caused by ________________ .$$$##0volcanic eruptions##C0plate movements##0tremors##";
    questionBank[13] = "$$$Earthquake of magnitude 6 has _____ times more energy than earthquake of magnitude 4.$$$##01.5##0100##C01000##";
    questionBank[14] = "$$$When charges move, they constitute ______________ .$$$##0magnetic field##0magnetic force##C0electric current##";
    questionBank[15] = "$$$An electroscope can be used to check if a body has ________ .$$$##0mass##0volume##C0charge##";
    questionBank[16] = "$$$The process of _______________  between clouds and earth causes lightening.$$$##C0electric discharge##0earthing##0electric conduction##";
    questionBank[17] = "$$$An ___________ is sudden shaking or trembling of earth.$$$##0lightening##0volcanic eruption##C0earthquake##";
    questionBank[18] = "$$$Earthquake is caused by disturbance deep inside the earth's _______ .$$$##0mantle##C0crust##0plate##";
    questionBank[19] = "$$$It is not possible to predict occurrence of ___________ .$$$##0cyclone##C0earthquake##0tornado##";
    questionBank[20] = "$$$On rubbing with glass rod, silk cloth acquires _________ charge.$$$##0negative##C0positive##0no##";
    questionBank[21] = "$$$Earthquakes tend to occur at the boundaries of earthâ€™s _______ .$$$##0mantle##0crust##C0plates##";
    questionBank[22] = "$$$_________ cannot be predicted in advance.$$$##C0earthquakes##0floods##0thunderstorms##";
    questionBank[23] = "$$$Earthquake of magnitude ___ or more causes large destruction.$$$##01##04##C07##";
    questionBank[24] = "$$$________ should be avoided during thunderstorms.$$$##C0bathing##0mobiles##0cordless phones##";
    
}

/**
 *
 * This function returns question given index
 *
 */
public function getQuestion(qIndex:uint):String
{
    if (qIndex < questionBankSize) { return(questionBank[qIndex]); }
    else  { return(new String("")); }
}

/**
 *
 * This function returns question bank size
 *
 */
public function getQuestionBankSize():uint
{
    return(questionBankSize);
}

/**
 *
 * This function returns experiment name
 *
 */
public function getExperimentName():String
{
    return(experimentName);
}

/**
 *
 * This function returns developer name
 *
 */
public function getDeveloperName():String
{
    return(developerName);
}

}

}
